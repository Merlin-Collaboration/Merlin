# The type of line endings. Default=Auto
newlines                       = LF         # { Auto, LF, CR, CRLF }

# Force the output encoding to UTF-8
utf8_force                     = true       # { False, True }

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces (default)
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs               = 2          # Number

# The original size of tabs in the input. Default=8
input_tab_size                 = 4          # Number

# The size of tabs in the output (only used if align_with_tabs=true). Default=8
output_tab_size                = 4          # Number

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8. Default=8
indent_columns                 = output_tab_size # Number

# Whether the 'namespace' body is indented
indent_namespace               = false      # { False, True }

# Whether the 'class' body is indented
indent_class                   = true       # { False, True }

# Same as indent_label, but for access specifiers that are followed by a colon. Default=1
indent_access_spec             = -output_tab_size # Number

# How to indent goto labels
# >0: absolute column where 1 is the leftmost column
# <=0: subtract from brace indent
# Default=1
indent_label                   = 0          # Number

# Try to limit code width to N number of columns
code_width                     = 120        # Number

# Whether to split lines as close to code_width as possible and ignore some groupings
ls_code_width                  = true       # { False, True }

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4. Negative value is absolute and not increased for each ( level
indent_continue                = 4          # Number

# Additional indenting for constructor initializer list
indent_ctor_init               = 4          # Number

# Double the indent for indent_func_xxx_param options
indent_func_param_double       = false      # { False, True }

# Virtual indent from the ':' for member initializers. Default=2
indent_ctor_init_leading       = 4          # Number

# The value of the indentation for a continuation line is calculate differently if the line is:
# a declaration :your case with QString fileName ...
# an assigment  :your case with pSettings = new QSettings( ...
# At the second case the option value might be used twice:
# at the assigment
# at the function call (if present)
# To prevent the double use of the option value, use this option with the value 'true'.
# True:  indent_continue will be used only once
# False: indent_continue will be used every time (default)
use_indent_continue_only_once  = true       # { False, True }

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
indent_align_assign            = false      # { False, True }

# The position of the comma in the constructor initialization list.
# Related to nl_constr_colon, nl_constr_init_args and pos_constr_colon.
pos_constr_comma               = trail_force # { Ignore, Lead, Trail }

# The position of colons between constructor and member initialization,
# (tied to UO_nl_constr_colon).
# Related to nl_constr_colon, nl_constr_init_args and pos_constr_comma.
pos_constr_colon               = trail_force # { Ignore, Lead, Trail }

# The position of arithmetic operators in wrapped expressions
pos_arith                      = lead       # { Ignore, Lead, Trail }

# Add or remove newline at the end of the file
nl_end_of_file                 = add        # { Ignore, Add, Remove, Force }

# The maximum consecutive newlines (3 = 2 blank lines)
nl_max                         = 2          # Number

# Add or remove newline between '=' and '{'
nl_assign_brace                = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'enum' and '{'
nl_enum_brace                  = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'union' and '{'
nl_union_brace                 = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'struct and '{'
nl_struct_brace                = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'do' and '{'
nl_do_brace                    = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'if' and '{'
nl_if_brace                    = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'for' and '{'
nl_for_brace                   = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'else' and '{'
nl_else_brace                  = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'while' and '{'
nl_while_brace                 = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between 'switch' and '{'
nl_switch_brace                = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
nl_fcall_brace                 = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between function signature and '{'
nl_fdef_brace                  = add	       # { Ignore, Add, Remove, Force }

# Add or remove newline between '}' and 'while' of 'do' statement
nl_brace_while                 = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between '}' and 'else'
nl_brace_else                  = add        # { Ignore, Add, Remove, Force }

# Whether to force a newline after a label's colon.
nl_after_label_colon           = true       # { False, True }

# Add or remove a newline around a class constructor colon.
# Related to nl_constr_init_args, pos_constr_colon and pos_constr_comma.
nl_constr_colon                = add        # { Ignore, Add, Remove, Force }

# Add or remove newlines at the start of the file
nl_start_of_file               = remove     # { Ignore, Add, Remove, Force }

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
# also '>>>' '<<' '>>' '%' '|'
sp_arith                       = add        # { Ignore, Add, Remove, Force }

# Add or remove space after ','
sp_after_comma                 = add        # { Ignore, Add, Remove, Force }

# Add or remove space around assignment operator '=', '+=', etc
sp_assign                      = add        # { Ignore, Add, Remove, Force }

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare                     = add        # { Ignore, Add, Remove, Force }

# Add or remove space around boolean operators '&&' and '||'
sp_bool                        = add        # { Ignore, Add, Remove, Force }

# Add or remove space in 'NS_ENUM ('
sp_enum_paren                  = remove     # { Ignore, Add, Remove, Force }

# Add or remove space before '(' of 'if', 'for', 'switch', 'while', etc.
sp_before_sparen               = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between function name and '(' on function definition
sp_func_def_paren              = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between function name and '(' on function calls
sp_func_call_paren             = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between a constructor/destructor and the open paren
sp_func_class_paren            = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren            = remove     # { Ignore, Add, Remove, Force }

# Add or remove space before class ':'
sp_before_class_colon          = remove     # { Ignore, Add, Remove, Force }

# Add or remove space after class ':'
sp_after_class_colon           = add        # { Ignore, Add, Remove, Force }

# Add or remove space inside '(' and ')'
sp_inside_paren                = remove     # { Ignore, Add, Remove, Force }

# Add or remove space inside if-condition '(' and ')'
sp_inside_sparen               = remove     # { Ignore, Add, Remove, Force }

# Add or remove spaces inside cast parens
sp_inside_paren_cast           = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between function name and '(' on function declaration
sp_func_proto_paren            = remove     # { Ignore, Add, Remove, Force }

# Add or remove space inside function '(' and ')'
sp_inside_fparen               = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between 'class' and '{'
nl_class_brace                 = add        # { Ignore, Add, Remove, Force }

# Add or remove space between '<>' and a word as in 'List<byte> m;' or 'template <typename T> static ...'
sp_angle_word                  = add        # { Ignore, Add, Remove, Force }

# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
sp_template_angle              = remove     # { Ignore, Add, Remove, Force }

# Add or remove space inside '<' and '>'
sp_inside_angle                = remove     # { Ignore, Add, Remove, Force }

# Add or remove space before '<>'
sp_before_angle                = remove     # { Ignore, Add, Remove, Force }

# Add or remove space between nested parens: '((' vs ') )'
sp_paren_paren                 = remove     # { Ignore, Add, Remove, Force }

# Add or remove space inside a non-empty '[' and ']'
sp_inside_square               = remove     # { Ignore, Add, Remove, Force }

# Add or remove space before the '::' operator
sp_before_dc                   = remove     # { Ignore, Add, Remove, Force }

# Add or remove space after the '::' operator
sp_after_dc                    = remove     # { Ignore, Add, Remove, Force }

# Controls the spaces after 'new', 'delete' and 'delete[]'
sp_after_new                   = add        # { Ignore, Add, Remove, Force }

# Add or remove space before '[]'
sp_before_squares              = remove     # { Ignore, Add, Remove, Force }

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
sp_after_cast                  = add        # { Ignore, Add, Remove, Force }

# Control the spacing before ':' in 'for (TYPE VAR : EXPR)'
sp_before_for_colon            = add        # { Ignore, Add, Remove, Force }

# Controls the spaces before a trailing or embedded comment
sp_before_tr_cmt               = add        # { Ignore, Add, Remove, Force }

# Don't split one-line enums: 'enum foo { BAR = 15 };'
nl_enum_leave_one_liners       = false      # { False, True }

# Add or remove newline between 'enum' and '{'
nl_enum_brace                  = add        # { Ignore, Add, Remove, Force }

# Add or remove newline before first element, after comma, and after last element in enum
nl_enum_own_lines              = add        # { Ignore, Add, Remove, Force }

# force nl before } of a struct/union/enum
# (lower priority than 'eat_blanks_before_close_brace')
nl_ds_struct_enum_close_brace  = true       # { False, True }

# Add or remove newline between '}' and 'catch'
nl_brace_catch                 = add        # { Ignore, Add, Remove, Force }

# Add or remove newline between 'catch' and '{'
nl_catch_brace                 = add        # { Ignore, Add, Remove, Force }

# Add or remove newline between return type and function name in a function definition
nl_func_type_name              = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between return type and function name inside a class {}
# Uses nl_func_type_name or nl_func_proto_type_name if set to ignore.
nl_func_type_name_class        = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between return type and function name in a prototype
nl_func_proto_type_name        = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline after each ',' in the constructor member initialization.
# Related to nl_constr_colon, pos_constr_colon and pos_constr_comma.
nl_constr_init_args            = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between a function name and the opening '(' in the declaration
nl_func_paren                  = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline between a function name and the opening '(' in the definition
nl_func_def_paren              = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline after '(' in a function declaration
nl_func_decl_start             = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline after '(' in a function definition
nl_func_def_start              = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline after each ',' in a function declaration
nl_func_decl_args              = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline after each ',' in a function definition
nl_func_def_args               = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline before the ')' in a function declaration
nl_func_decl_end               = remove     # { Ignore, Add, Remove, Force }

# Add or remove newline before the ')' in a function definition
nl_func_def_end                = remove     # { Ignore, Add, Remove, Force }

# Add or remove unnecessary paren on 'return' statement
mod_paren_on_return            = remove     # { Ignore, Add, Remove, Force }

# Whether to remove superfluous semicolons
mod_remove_extra_semicolon     = True       # { False, True }

